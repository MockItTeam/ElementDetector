import sys
import numpy as np
import cv2
import random
from shapely.geometry import Point, LineString, Polygon

def as_tuple(point):
  return int(point.x), int(point.y)

def all_tuples(vertices):
  tuples = []
  for v in vertices:
    tuples.append(as_tuple(v))
  return tuples

# def polygon_area(vertices):
#   n = len(vertices)
#   area = 0.0
#   for i in range(n):
#     j = (i + 1) % n
#     area += vertices[i].x * vertices[j].y
#     area -= vertices[j].x * vertices[i].y
#   area = abs(area) / 2.0
#   return area

def get_points(approx):
  points = []
  for i in range(len(approx)):
    points.append(Point(approx[i][0][0], approx[i][0][1]))
  return points

def draw(img, polygon, color):
  vertices = polygon.coords
  vertex_count = len(vertices)
  for i in range(vertex_count - 1):
    cv2.circle(img, as_tuple(vertices[i]), 2, color, -1)
    cv2.putText(img, str(i), as_tuple(vertices[i]), cv2.FONT_HERSHEY_SIMPLEX, 0.5, color, 1)
    cv2.line(img, as_tuple(vertices[i]), as_tuple(vertices[i + 1]), color, 1)
  cv2.line(img, as_tuple(vertices[vertex_count - 1]), as_tuple(vertices[0]), color, 1) # Draw line from last vertex to the first one.

def rand_color():
  r = random.randint(0, 255)
  g = random.randint(0, 255)
  b = random.randint(0, 255)
  return r, g, b

def main(argv):
  img = cv2.imread('/Users/mapfap/Desktop/test.jpg')
  img = cv2.resize(img, (int(img.shape[1] * 1), int(img.shape[0] * 1)))
  gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

  kernel = np.ones((2, 2), np.uint8)
  erosion = cv2.erode(gray, kernel, iterations = 1)
  # erosion = gray # Skip erosion

  height, width = gray.shape
  newimg = np.zeros((height, width, 3), np.uint8)

  # Canny edge detector
  thresh = 180
  edges = cv2.Canny(erosion, thresh, thresh * 2)

  contours,hierarchy = cv2.findContours(edges, cv2.cv.CV_RETR_CCOMP, cv2.CHAIN_APPROX_SIMPLE)
  # contours,hierarchy = cv2.findContours(edges, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

  for b,cnt in enumerate(contours):
    if hierarchy[0,b,3] == -1:
      approx = cv2.approxPolyDP(cnt, 0.015 * cv2.arcLength(cnt, True), True)
      points = get_points(approx)
      point_count = len(points)
      
      if (point_count == 1):
        continue
      elif (point_count == 2):
        continue

      polygon = Polygon(all_tuples(points))
      # area = polygon_area(polygon)
      # print "area=%d, vertices=%d" % (area, len(vertices))
      will_draw = False
      
      if (point_count == 3):
        pass
      elif (point_count == 4):
        # if area > 100:
        will_draw = True
        print "a=%d" % (polygon.area) 
        pass
      elif (point_count == 5):
        pass
      elif (point_count == 6):
        pass
      elif (point_count == 7):
        pass
      elif (point_count == 8):
        # will_draw = True
        pass
      else:
        pass
        
      if (will_draw):
        draw(newimg, polygon, rand_color())

  cv2.imshow('Show', newimg)
  cv2.waitKey(0)
  cv2.destroyAllWindows()

if __name__ == "__main__":
  main(sys.argv)